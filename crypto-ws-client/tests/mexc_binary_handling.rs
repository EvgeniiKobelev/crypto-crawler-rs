#[cfg(test)]
mod tests {
    use log::*;

    #[test]
    fn test_mexc_binary_data_detection() {
        env_logger::init();
        
        // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        
        // GZIP –∑–∞–≥–æ–ª–æ–≤–æ–∫
        let gzip_data = vec![0x1f, 0x8b, 0x08, 0x00];
        let is_gzip = gzip_data.len() >= 2 && gzip_data[0] == 0x1f && gzip_data[1] == 0x8b;
        assert!(is_gzip);
        
        // DEFLATE/ZLIB –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        let deflate_data1 = vec![0x78, 0x01]; // zlib header
        let is_deflate1 = deflate_data1.len() >= 2 && 
            deflate_data1[0] == 0x78 && 
            (deflate_data1[1] == 0x01 || deflate_data1[1] == 0x9c || deflate_data1[1] == 0xda);
        assert!(is_deflate1);
        
        let deflate_data2 = vec![0x78, 0x9c]; // zlib header
        let is_deflate2 = deflate_data2.len() >= 2 && 
            deflate_data2[0] == 0x78 && 
            (deflate_data2[1] == 0x01 || deflate_data2[1] == 0x9c || deflate_data2[1] == 0xda);
        assert!(is_deflate2);
        
        // Protocol Buffers –¥–∞–Ω–Ω—ã–µ - —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        let protobuf_data1 = vec![0x08, 0x96, 0x01, 0x12]; // —Ç–∏–ø–∏—á–Ω—ã–π protobuf —Å varint
        let protobuf_data2 = vec![0x0a, 0x1e]; // field 1, length-delimited, length 30
        let protobuf_data3 = vec![0x0a, 0x1e, b's', b'p', b'o', b't', b'@']; // —Ä–µ–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–±—É—Ñ
        for protobuf_data in [&protobuf_data1, &protobuf_data2, &protobuf_data3] {
            let is_gzip = protobuf_data.len() >= 2 && protobuf_data[0] == 0x1f && protobuf_data[1] == 0x8b;
            let is_deflate_zlib = protobuf_data.len() >= 2 && 
                protobuf_data[0] == 0x78 && 
                (protobuf_data[1] == 0x01 || protobuf_data[1] == 0x9c || protobuf_data[1] == 0xda);
            
            let is_likely_protobuf = protobuf_data.len() >= 4 && 
                !is_gzip && !is_deflate_zlib &&
                (
                    (protobuf_data[0] == 0x08 && protobuf_data[1] < 0x80) || // field 1, varint
                    (protobuf_data[0] == 0x0a && protobuf_data[1] < 0x80) || // field 1, length-delimited
                    (protobuf_data[0] == 0x10 && protobuf_data[1] < 0x80) || // field 2, varint
                    (protobuf_data[0] == 0x12 && protobuf_data[1] < 0x80) || // field 2, length-delimited
                    (protobuf_data[0] == 0x0a && protobuf_data.len() > 10 && 
                     protobuf_data[2..].starts_with(b"spot@"))
                );
            
            assert!(!is_gzip, "Protobuf data incorrectly detected as GZIP: {:?}", protobuf_data);
            assert!(!is_deflate_zlib, "Protobuf data incorrectly detected as DEFLATE: {:?}", protobuf_data);
            
            // –î–ª—è protobuf_data3 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º spot@ –ø–∞—Ç—Ç–µ—Ä–Ω
            if protobuf_data[0] == 0x0a && protobuf_data.len() > 6 {
                if protobuf_data[2..].starts_with(b"spot@") {
                    assert!(is_likely_protobuf, "Real protobuf pattern not detected: {:?}", protobuf_data);
                }
            } else if protobuf_data[0] == 0x08 || protobuf_data[0] == 0x0a {
                assert!(is_likely_protobuf, "Protobuf pattern not detected: {:?}", protobuf_data);
            }
        }
        
        // JSON –¥–∞–Ω–Ω—ã–µ (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
        let json_data = b"{\"test\":\"value\"}";
        let is_json = String::from_utf8(json_data.to_vec()).is_ok() &&
                     (json_data[0] == b'{' || json_data[0] == b'[');
        assert!(is_json);
        
        println!("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ");
    }

    #[test]
    fn test_protobuf_channel_detection() {
        // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–±—É—Ñ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
        
        let protobuf_commands = vec![
            r#"{"method":"SUBSCRIPTION","params":["spot@public.deals.v3.api.pb@BTCUSDT"]}"#,
            r#"{"method":"SUBSCRIPTION","params":["spot@public.aggre.depth.v3.api.pb@100ms@BTCUSDT"]}"#,
            r#"{"method":"SUBSCRIPTION","params":["spot@public.kline.v3.api.pb@BTCUSDT@Min1"]}"#,
        ];
        
        let json_commands = vec![
            r#"{"method":"SUBSCRIPTION","params":["spot@public.deals.v3.api@BTCUSDT"]}"#,
            r#"{"method":"SUBSCRIPTION","params":["spot@public.increase.depth.v3.api@BTCUSDT"]}"#,
            r#"{"method":"SUBSCRIPTION","params":["spot@public.kline.v3.api@BTCUSDT@Min1"]}"#,
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ø—Ä–æ—Ç–æ–±—É—Ñ –∫–∞–Ω–∞–ª–æ–≤
        for command in protobuf_commands {
            assert!(command.contains(".pb@") || command.contains(".api.pb"));
            println!("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω protobuf –∫–∞–Ω–∞–ª: {}", command);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –∫–∞–Ω–∞–ª—ã –Ω–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Ç–æ–±—É—Ñ
        for command in json_commands {
            assert!(!command.contains(".pb@") && !command.contains(".api.pb"));
            println!("‚úÖ JSON –∫–∞–Ω–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {}", command);
        }
        
        println!("‚úÖ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–±—É—Ñ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
    }

    #[test]
    fn test_utf8_vs_binary_data() {
        // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è UTF-8 JSON –æ—Ç –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        // –í–∞–ª–∏–¥–Ω—ã–π JSON
        let valid_json = br#"{"channel":"spot@public.deals.v3.api@BTCUSDT","data":{"price":"50000"}}"#;
        let json_result = String::from_utf8(valid_json.to_vec());
        assert!(json_result.is_ok());
        let json_str = json_result.unwrap();
        assert!(json_str.trim().starts_with('{') || json_str.trim().starts_with('['));
        
        // –°–∏–º—É–ª—è—Ü–∏—è Protocol Buffers –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π UTF-8)
        let protobuf_data = vec![0x08, 0x96, 0x01, 0x12, 0x0a, 0x42, 0x54, 0x43, 0x55, 0x53, 0x44, 0x54];
        let protobuf_result = String::from_utf8(protobuf_data.clone());
        assert!(protobuf_result.is_err());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –±–∞–π—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ protobuf (< 32 –∏ –Ω–µ —Å–∂–∞—Ç–∏–µ)
        let first_byte = protobuf_data[0];
        let is_likely_protobuf = first_byte < 32 && 
                                !(protobuf_data.len() >= 2 && first_byte == 0x1f && protobuf_data[1] == 0x8b) && // –Ω–µ gzip
                                !(protobuf_data.len() >= 2 && first_byte == 0x78); // –Ω–µ zlib
        
        println!("üîç –ü–µ—Ä–≤—ã–π –±–∞–π—Ç protobuf –¥–∞–Ω–Ω—ã—Ö: 0x{:02x}", first_byte);
        println!("üîç –í–µ—Ä–æ—è—Ç–Ω–æ protobuf: {}", is_likely_protobuf);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ UTF-8 –±–∞–π—Ç–∞–º–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        let mut corrupted_json = b"{\"test\":\"".to_vec();
        corrupted_json.extend_from_slice(&[0xFF, 0xFE]); // –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ UTF-8 –±–∞–π—Ç—ã
        corrupted_json.extend_from_slice(b"\"}");
        
        let corrupted_result = String::from_utf8(corrupted_json);
        assert!(corrupted_result.is_err());
        
        println!("‚úÖ –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è UTF-8/–±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
    }

    #[test]
    fn test_compression_headers() {
        // –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–∂–∞—Ç–∏—è
        
        // –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã GZIP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        let gzip_headers = vec![
            vec![0x1f, 0x8b, 0x08, 0x00], // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π gzip
            vec![0x1f, 0x8b, 0x08, 0x01], // gzip —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–ª–∞–≥–æ–º
        ];
        
        for header in gzip_headers {
            let is_gzip = header.len() >= 2 && header[0] == 0x1f && header[1] == 0x8b;
            assert!(is_gzip, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ GZIP –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {:?}", header);
        }
        
        // –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã DEFLATE/ZLIB –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        let deflate_headers = vec![
            vec![0x78, 0x01], // zlib deflate, —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è 1
            vec![0x78, 0x9c], // zlib deflate, —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è 6 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            vec![0x78, 0xda], // zlib deflate, —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è 9
        ];
        
        for header in deflate_headers {
            let is_deflate = header.len() >= 2 && 
                ((header[0] == 0x78 && (header[1] == 0x01 || header[1] == 0x9c || header[1] == 0xda)) ||
                 (header[0] == 0x08 || header[0] == 0x78));
            assert!(is_deflate, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ DEFLATE –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {:?}", header);
        }
        
        // –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ —Å–∂–∞—Ç—ã–µ
        let non_compressed = vec![
            vec![0x7b, 0x22], // "{ JSON –Ω–∞—á–∞–ª–æ
            vec![0x5b, 0x22], // "[ JSON –º–∞—Å—Å–∏–≤
            vec![0x08, 0x96], // protobuf (0x08 –Ω–æ –Ω–µ zlib)
            vec![0x00, 0x01], // –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        ];
        
        for data in non_compressed {
            let is_gzip = data.len() >= 2 && data[0] == 0x1f && data[1] == 0x8b;
            let is_deflate = data.len() >= 2 && 
                ((data[0] == 0x78 && (data[1] == 0x01 || data[1] == 0x9c || data[1] == 0xda)) ||
                 (data[0] == 0x08 || data[0] == 0x78));
                 
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è 0x08 0x96 - –Ω–µ –¥–æ–ª–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ deflate
            if data == vec![0x08, 0x96] {
                assert!(!is_deflate, "0x08 0x96 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ deflate");
            }
            
            assert!(!is_gzip, "–î–∞–Ω–Ω—ã–µ {:?} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ GZIP", data);
            println!("‚úÖ –î–∞–Ω–Ω—ã–µ {:?} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ù–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ —Å–∂–∞—Ç—ã–µ", data);
        }
        
        println!("‚úÖ –¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–∂–∞—Ç–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
    }

    #[test]
    fn test_real_mexc_protobuf_case() {
        // –¢–µ—Å—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è –∏–∑ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let real_protobuf_data = vec![
            10, 30, 115, 112, 111, 116, 64, 112, 114, 105, 118, 97, 116, 101, 46, 97, 99, 99, 111, 117
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ —Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        let is_gzip = real_protobuf_data.len() >= 2 && 
            real_protobuf_data[0] == 0x1f && real_protobuf_data[1] == 0x8b;
        let is_deflate_zlib = real_protobuf_data.len() >= 2 && 
            real_protobuf_data[0] == 0x78 && 
            (real_protobuf_data[1] == 0x01 || real_protobuf_data[1] == 0x9c || real_protobuf_data[1] == 0xda);
        
        assert!(!is_gzip, "–†–µ–∞–ª—å–Ω—ã–µ protobuf –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ GZIP");
        assert!(!is_deflate_zlib, "–†–µ–∞–ª—å–Ω—ã–µ protobuf –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ DEFLATE");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ protobuf
        let is_likely_protobuf = real_protobuf_data.len() >= 4 && 
            !is_gzip && !is_deflate_zlib &&
            (
                (real_protobuf_data[0] == 0x08 && real_protobuf_data[1] < 0x80) ||
                (real_protobuf_data[0] == 0x0a && real_protobuf_data[1] < 0x80) ||
                (real_protobuf_data[0] == 0x10 && real_protobuf_data[1] < 0x80) ||
                (real_protobuf_data[0] == 0x12 && real_protobuf_data[1] < 0x80) ||
                (real_protobuf_data[0] == 0x0a && real_protobuf_data.len() > 10 && 
                 real_protobuf_data[2..].starts_with(b"spot@"))
            );
        
        assert!(is_likely_protobuf, "–†–µ–∞–ª—å–Ω—ã–µ protobuf –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        if real_protobuf_data[0] == 0x0a {
            let channel_length = real_protobuf_data[1] as usize;
            assert_eq!(channel_length, 30, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞");
            
            if real_protobuf_data.len() >= 2 + channel_length {
                let channel_bytes = &real_protobuf_data[2..2 + std::cmp::min(channel_length, real_protobuf_data.len() - 2)];
                if let Ok(channel_name) = String::from_utf8(channel_bytes.to_vec()) {
                    assert!(channel_name.starts_with("spot@private"), "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'spot@private': {}", channel_name);
                    println!("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∫–∞–Ω–∞–ª –∏–∑ protobuf: '{}'", channel_name);
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π UTF-8 –∏–∑-–∑–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ü–µ
        let utf8_result = String::from_utf8(real_protobuf_data.clone());
        // –í —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ü–µ –µ—Å—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ UTF-8 –±–∞–π—Ç—ã, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–æ–π
        // –ù–æ –¥–ª—è –Ω–∞—à–µ–≥–æ —É—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å OK, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º
        match utf8_result {
            Ok(s) => println!("üìù –î–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UTF-8: '{}'", s),
            Err(e) => println!("üìù –î–∞–Ω–Ω—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UTF-8: {}", e),
        }
        
        println!("‚úÖ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è MEXC protobuf –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
    }
} 